In Python, understanding the difference between shallow and deep copies is important when working with mutable data structures like lists.

### **Shallow Copy:**

A **shallow copy** creates a new object, but the elements inside the object are still references to the same memory locations as the original object. So, modifying the contents of the original list will affect the shallow copy (and vice versa), since both point to the same underlying elements.

a = [[-1, -1]] * 3  # Shallow copy
print(a)  # Output: [[-1, -1], [-1, -1], [-1, -1]]

a[0][0] = 5  # Modifying the first element of the first sublist
print(a)  # Output: [[5, -1], [5, -1], [5, -1]]

**Explanation:**
- `[-1, -1] * 3` doesn’t create three independent sublists. It creates **three references** to the same list `[-1, -1]`. 
- As a result, any change to one sublist affects all the others because they are pointing to the same list in memory.






### **Deep Copy:**

A **deep copy**, on the other hand, creates a new object and recursively copies all the elements. This means that both the outer list and all the inner lists are new, independent objects in memory. Changing one object won’t affect the others.

For example:

```python
a = [[-1, -1] for _ in range(3)]  # Deep copy using list comprehension
print(a)  # Output: [[-1, -1], [-1, -1], [-1, -1]]

a[0][0] = 5  # Modifying the first element of the first sublist
print(a)  # Output: [[5, -1], [-1, -1], [-1, -1]]
```

**Explanation:**
- `[-1, -1] for _ in range(3)` creates three **independent** sublists, each with its own memory space.
- Modifying one sublist doesn’t affect the others because they are stored in different locations.


dp = [[-1, -1]] * (len(prices) + 1)  # Shallow copy
```
This means that each element of the `dp` table is referencing the same `[-1, -1]` list. As a result, updating any entry in `dp` modifies the same sublist across all rows, leading to incorrect behavior in your DP table.

To fix this, you should create independent rows with:
dp = [[-1, -1] for _ in range(len(prices))]  # Deep copy
```
This ensures that each row in `dp` is a separate list, allowing you to store unique values for each state (i.e., each combination of `idx` and `buy`).



SO IN CASE OF LIST[LIST]  CREATES DEEP COPY USING LIST COMPREHENSION OR WE CAN USE DEEPCOPY METHOD AS WELL BUT OTHER METHODS APART FROM THESE CAN CREATES SHALLOW COPY. 
